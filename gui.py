from tensorflow import keras
import numpy as np 
import string
import re
import nltk 

stopword = nltk.corpus.stopwords.words('english')
s = nltk.PorterStemmer()


with open('./ressources/words.txt') as f:
    words = f.read().splitlines()

def clean_text(text):
    text  = "".join([char for char in text if char not in string.punctuation])
    text = re.sub('[0-9]+', '', text)  # removing numbers
    text = re.sub('[^a-zA-Z]' , ' ' , text)
    text = re.split('\W+', text)
    text = [w for w in text if not w.lower() in stopword]
    text = [s.stem(word) for word in text]

    return text


def vect_sent(tweet, words):
    # tokenize the pattern
    tweet_word = clean_text(tweet)
    # bag of words
    bag = [0]*len(words)  
    for s in tweet_word:
        for i,w in enumerate(words):
            if w == s: 
                bag[i] = 1
    
    
    a_predire=[]
    a_predire.append(np.array(bag))
    return(a_predire)
    
model = keras.models.load_model('./ressources/model')


# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import tkinter as tk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("747x436")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 436,
    width = 747,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    3.0,
    8.0,
    747.0,
    461.0,
    fill="#FFFFFF",
    outline="")


def Del():
    entry_1.delete('1.0', tk.END)
    entry_2.configure(state='normal')
    entry_2.delete('1.0', tk.END)
    entry_2.configure(state='disabled')

    
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: Del(),
    relief="flat"
)
button_1.place(
    x=82.0,
    y=359.0,
    width=172.0,
    height=52.0
)

def Take_input():
    INPUT = entry_1.get("1.0", "end-1c")

    a_predire=vect_sent(INPUT,words)
    a_predire=np.asarray(a_predire).astype(np.int)
    rs=model.predict(a_predire)
    if 0.9<rs[0][0]<1.2 :
        result='REAL'
    else :
        result='FAKE'
    
    entry_2.configure(state='normal')
    entry_2.delete('1.0', tk.END)
    entry_2.insert(tk.END, result)
    entry_2.configure(state='disabled')

    
    
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: Take_input(),
    relief="flat"
)
button_2.place(
    x=498.0,
    y=359.0,
    width=172.0,
    height=52.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    383.0,
    159.0,
    image=entry_image_1
)
entry_1 = Text(
    bd=0,
    bg="#F8F8F8",
    highlightthickness=0
)
entry_1.place(
    x=90.0,
    y=100.0,
    width=586.0,
    height=116.0
)

canvas.create_text(
    247.0,
    29.0,
    anchor="nw",
    text="Entrez un tweet",
    fill="#000000",
    font=("Roboto", 36 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    325.5,
    299.5,
    image=entry_image_2
)
entry_2 = Text(
    bd=0,
    state='disabled',
    bg="#F8F8F8",
    highlightthickness=0
)
entry_2.place(
    x=215.0,
    y=268.0,
    width=221.0,
    height=61.0
)

canvas.create_text(
    38.0,
    277.0,
    anchor="nw",
    text="Prediction",
    fill="#000000",
    font=("Roboto", 36 * -1)
)
window.resizable(False, False)
window.mainloop()
